module Reright where
  open import Prelude
  open import Tactic.Reflection.Reright

  module Testโ where
    postulate
      SetโกSet : Set โก Set
      Aโ : Set
      Aโ : Aโ โ Set
      Aโ : (aโ : Aโ) โ Aโ aโ โ Set
      Aโ : (aโ : Aโ) โ (aโ : Aโ aโ) โ Aโ aโ aโ โ Set
      Bโ : Set
      Bโ : Bโ โ Set
      Bโ : (bโ : Bโ) โ Bโ bโ โ Set
      Bโ : (bโ : Bโ) โ (bโ : Bโ bโ) โ Bโ bโ bโ โ Set
      AโโกBโ : Aโ โก Bโ
      F : Set โ Set
      C : (ฮฑ : Level) (ฮฒ : Level) โ Set ฮฑ โ Set ฮฒ
      ๐จโยน : Aโ
      ๐จโยฒ : Aโ
      ๐จโยนโก๐จโยฒ : ๐จโยน โก ๐จโยฒ
      ๐จโ๐จโยฒโ : (aโ๐จโยฒ : Aโ ๐จโยฒ) โ Aโ ๐จโยฒ aโ๐จโยฒ
      ๐ฉโ : Bโ
      Kโ : Aโ โ Set

    testโ : (bโยน bโยฒ : Bโ) (bโยนโกbโยฒ : bโยน โก bโยฒ) โ Set
    testโ bโยน bโยฒ bโยนโกbโยฒ with bโยนโกbโยฒ
    testโ bโยน bโยฒ bโยนโกbโยฒ | bโยนโกbโยฒ-with = let bโยนโกbโยฒ-let = bโยนโกbโยฒ-with in reright bโยนโกbโยฒ-let {!!}

    testโ : โ (aโ : Aโ) โ aโ โก aโ
    testโ aโ = id (reright AโโกBโ {!!})

    testโ : Aโ โ Bโ
    testโ aโ = reright AโโกBโ (ฮป bโ โ ๐ฉโ)
   
    testโ : Aโ โ Bโ
    testโ aโ = reright SetโกSet (reright AโโกBโ (ฮป bโ โ ๐ฉโ))
   
    testโ : Aโ โ Bโ
    testโ aโ = reright SetโกSet (reright AโโกBโ (ฮป bโ โ reright AโโกBโ {!!}))
   
    testโ : Aโ โ Bโ
    testโ aโ = reright SetโกSet ๐ฉโ
   
    testโ : Aโ โ Bโ
    testโ aโ = reright SetโกSet $ reright AโโกBโ $ {!!}
   
    testโ : โ {ฮฑ : Level}
            (aโ : Aโ)
            {ฮฒ : Level}
            (X Y : Set (ฮฑ โ ฮฒ))
            โ X โก Y
            โ Y โก X
    testโ {ฮฑ} aโ {ฮฒ} X Y XโกY = id (reright XโกY {!!})
   
    testโ : (aโ๐จโยน : Aโ ๐จโยน) โ Aโ ๐จโยน aโ๐จโยน
    testโ aโ๐จโยน = reright ๐จโยนโก๐จโยฒ (ฮป aโ๐จโยฒ โ {!!})
   
    testโ : (aโยน : Aโ) (aโยฒ : Aโ) (aโยนโกaโยฒ-1 : aโยน โก aโยฒ) (aโaโยน : Aโ aโยน) (X : Set) (Y : Set) (aโยนโกaโยฒ-2 : aโยน โก aโยฒ) โ F (Aโ aโยน aโaโยน) โ F (Aโ aโยน) โก Aโ aโยน aโaโยน
    testโ aโยน aโยฒ aโยนโกaโยฒ-1 aโaโยน X Y aโยนโกaโยฒ-2 = reright aโยนโกaโยฒ-1 {!!}
   
    module _ (Aโโ : (aโ : Aโ) (aโaโ : Aโ aโ) โ Aโ aโ aโaโ) where
      testโโ : (aโ : Aโ) (aโaโยน : Aโ aโ) (aโaโยฒ : Aโ aโ) (aโaโยนโกaโaโยฒ : aโaโยน โก aโaโยฒ) โ Aโ aโ aโaโยน
      testโโ aโ aโaโยน aโaโยฒ aโaโยนโกaโaโยฒ = reright aโaโยนโกaโaโยฒ {!!}
      
    testโโ : (aโยน : Aโ) (aโยฒ : Aโ) (FAโaโยนโกFAโaโยฒ : F (Aโ aโยน) โก F (Aโ aโยฒ)) โ F (Aโ aโยน) โ F (Aโ aโยน) โก F (F (Aโ aโยน))
    testโโ aโยน aโยฒ FAโaโยนโกFAโaโยฒ = reright FAโaโยนโกFAโaโยฒ {!!}
   
    testโโ : (aโยน : Aโ) (aโยฒ : Aโ) (FAโaโยนโกFAโaโยฒ : F (Aโ aโยน) โก F (Aโ aโยฒ)) โ F (Aโ aโยน) โ F (Aโ aโยน) โก F (F (Aโ aโยน))
    testโโ aโยน aโยฒ FAโaโยนโกFAโaโยฒ FAโaโยน = reright FAโaโยนโกFAโaโยฒ {!!}
   
    testโโ : (ฮฒ : Level)
             (aโยน : Aโ)
             (ฯ : Level)
             (aโยฒ : Aโ)
             (CAโaโยนโกCAโaโยฒ : C lzero (ฮฒ โ ฯ) (Aโ aโยน) โก C lzero (ฮฒ โ ฯ) (Aโ aโยฒ)) โ
             C lzero (ฮฒ โ ฯ) (Aโ aโยน)
             โ Nat โ ฮฃ _ ฮป ฮณ โ C lzero (ฮฒ โ ฯ) (Aโ aโยน) โก C ฮณ (ฮฒ โ ฯ) (C lzero ฮณ (Aโ aโยน)) 
    testโโ ฮฒ aโยน ฯ aโยฒ CAโaโยนโกCAโaโยฒ CAโaโยน = reright CAโaโยนโกCAโaโยฒ {!!}
   
    testโโ : (aโ : Aโ) (FFAโaโโกFAโaโ : F (F (Aโ aโ)) โก F (Aโ aโ)) โ F (F (F (F (Aโ aโ))))
    testโโ aโ FFAโaโโกFAโaโ = reright FFAโaโโกFAโaโ (reright FFAโaโโกFAโaโ (reright FFAโaโโกFAโaโ {!!}))
   
    testโโ : (aโ : Aโ) (FAโaโโกFFAโaโ : F (Aโ aโ) โก F (F (Aโ aโ))) โ F (F (Aโ aโ))
    testโโ aโ FAโaโโกFFAโaโ = reright FAโaโโกFFAโaโ (reright FAโaโโกFFAโaโ {!!})
   
    testโโ : (l : Aโ โ Level โ Level)
             (ฮฒ : Level)
             (aโยฒ : Aโ)
             (aโยน : Aโ)
             (CAโaโยนโกCAโaโยฒ : C lzero (l aโยน ฮฒ) (Aโ aโยน) โก C lzero (l aโยน ฮฒ) (Aโ aโยฒ))
             โ C lzero (l aโยน ฮฒ) (Aโ aโยน)
             โ ฮฃ _ ฮป ฮณ โ C lzero (l aโยน ฮฒ) (Aโ aโยน) โก C ฮณ (l aโยน ฮฒ) (C lzero ฮณ (Aโ aโยน))
    testโโ l ฮฒ aโยฒ aโยน CAโaโยนโกCAโaโยฒ CAโaโยน = reright CAโaโยนโกCAโaโยฒ {!!}
   
    testโโ : (aโยน : Aโ)
             (aโยฒ : Aโ)
             (Kโaโยน : Kโ aโยน)
             (aโยนโกaโยฒ : aโยน โก aโยฒ)
           โ Set
    testโโ aโยน aโยฒ Kโaโยน aโยนโกaโยฒ = reright aโยนโกaโยฒ {!!}
   
    testโโ : (aโยน : Aโ)
             (aโยฒ : Aโ)
             (kโaโยน : Kโ aโยน)
             (FKโaโยน : F (Kโ aโยน))
             (KโaโยนโกKโaโยฒ : Kโ aโยน โก Kโ aโยฒ)
           โ F (F (Kโ aโยน)) โก F (Kโ aโยฒ)
    testโโ aโยน aโยฒ kโaโยน FKโaโยน KโaโยนโกKโaโยฒ = reright KโaโยนโกKโaโยฒ {!!}
   
    testโโ : โ {aโยน : Aโ}
               {aโยฒ : Aโ}
               {aโaโยฒ-1 aโaโยฒ-2 aโaโยฒ-3 : Aโ aโยฒ}
               {aโaโยฒ-2=aโaโยฒ-3 : Aโ aโยฒ aโaโยฒ-2 โก Aโ aโยฒ aโaโยฒ-3}
               (R : โ (aโยฒ' : Aโ) โ Aโ aโยฒ aโaโยฒ-1 โก Aโ aโยฒ aโaโยฒ-2)
               (X : Aโ aโยฒ aโaโยฒ-2 โก Aโ aโยฒ aโaโยฒ-3)
               {ignore : Set}
             โ Aโ aโยฒ aโaโยฒ-1 โก Aโ aโยฒ aโaโยฒ-3
    testโโ {aโยน} {aโยฒ} {aโaโยฒ-1} {aโaโยฒ-2} {aโaโยฒ-3} {aโaโยฒ-2=aโaโยฒ-3} R X = reright (R aโยน) {!!}

    {- FAILS
      testโโ' : (fโ : Aโ) (fโ : Aโ) (AโfโโกAโfโ : Aโ fโ โก Aโ fโ) (gโ : Aโ fโ) โ Aโ fโ gโ
      testโโ' fโ fโ AโfโโกAโfโ gโ rewrite AโfโโกAโfโ = {!!}

      testโโ : (fโ : Aโ) (fโ : Aโ) (AโfโโกAโfโ : Aโ fโ โก Aโ fโ) (gโ : Aโ fโ) โ Aโ fโ gโ
      testโโ fโ fโ AโfโโกAโfโ gโ = reright AโfโโกAโfโ {!!}
    -}
   
  module Testโ where
    record Map 
             {K : Set}
             (V : K โ Set)
             (Carrier : Nat โ Set) {{isDecEquivalence/K : Eq K}} {{isDecEquivalence/V : (k : K) โ Eq (V k)}} : Setโ where
      field
        โ : Carrier 0
        _โ_ : โ {s} โ K โ Carrier s โ Set
        โ-is-empty : โ {๐} {โ : Carrier 0} โ ๐ โ โ
     
      _โ_ : โ {s} โ K โ Carrier s โ Set
      _โ_ k m = ยฌ k โ m
   
      field
        get : โ {k : K} {s} {m : Carrier s} โ k โ m โ V k
        put : โ {kโ : K} (vโ : V kโ) {sโ} {mโ : Carrier sโ} โ kโ โ mโ โ ฮฃ _ ฮป (mโ : Carrier (suc sโ)) โ ฮฃ _ ฮป (kโโmโ : kโ โ mโ) โ get kโโmโ โก vโ
   
    postulate
      A : Set
   
    V : A โ Set
    V = ฮป _ โ Nat
   
    postulate
      M : Nat โ Set
      isDecEquivalence/A : Eq A
      isDecEquivalence/V : (a : A) โ Eq (V a)
   
    postulate
      m : Map V M {{isDecEquivalence/A}} {{isDecEquivalence/V}}
   
    open Map m
   
    testโ : (v : Nat) (k : A)
      โ (kโputkvโ : k โ (fst $ put {kโ = k} v {mโ = โ} โ-is-empty))
      โ Set
    testโ v k kโputkvโ = let p = (put {kโ = k} v {mโ = โ} โ-is-empty) in let r = sym (snd $ snd p) in reright r {!!}
